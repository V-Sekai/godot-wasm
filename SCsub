from utils import download_wasmer, VERSION_DEFAULT

opts = Variables([], ARGUMENTS)

opts.Add(BoolVariable("download_wasmer", "Download Wasmer library", "no"))
opts.Add("wasmer_version", "Wasmer library version", VERSION_DEFAULT)

# Import env and create module-specific clone
Import("env")
module_env = env.Clone()
opts.Update(module_env)

# Download Wasmer if required
download_wasmer(env, module_env["download_wasmer"], module_env["wasmer_version"])

# Check platform specifics
if env["platform"] in ["linux", "linuxbsd", "x11"]:
    env["LIBWASMERSUFFIX"] = ".a"
elif env["platform"] in ["osx", "macos"]:
    env["LIBWASMERSUFFIX"] = ".a"
    env.Append(LINKFLAGS=["-framework", "Security"])
elif env["platform"] == "windows":
    if env.get("use_mingw"):  # MinGW
        env["LIBWASMERSUFFIX"] = ".a"
        env.Append(LIBS=["userenv"])
    else:  # MSVC
        env["LIBWASMERSUFFIX"] = ".lib"
        # Force Windows SDK library suffix (see https://github.com/godotengine/godot/issues/23687)
        env.Append(LINKFLAGS=["bcrypt.lib", "userenv.lib", "ws2_32.lib", "advapi32.lib"])

# Explicit static libraries
wasmer_lib = env.File("wasmer/lib/{}wasmer{}".format(env["LIBPREFIX"], env.get("LIBWASMERSUFFIX", env["LIBSUFFIX"])))

# Linked libraries (global env) and includes (cloned env)
env.Append(LIBPATH=[env.Dir("wasmer/lib").abspath])
env.Append(LIBS=[wasmer_lib])
module_env.Append(CPPPATH=[env.Dir("wasmer/include").abspath])

# Defines for module agnosticism
module_env.Append(CPPDEFINES=["GODOT_MODULE"])

# Module sources
module_env.add_source_files(
    env.modules_sources, ["register_types.cpp", env.Glob("src/*.cpp", exclude="src/godot-library.cpp")]
)
